
G_hist= zeros(numRuns, numEpochs);

numAgents = numel([batteryAgents motorAgents propAgents rodAgents]);
bestActions = uint8(zeros(numRuns,numAgents)); % The discrete action choices of the agents that give best performance

rewards_hist = zeros(numAgents, numRuns, numEpochs);
actions_hist = zeros(numAgents, numRuns, numEpochs);
agents_hist = cell(numRuns, numEpochs);
maxG = -10000*zeros(numRuns, 1);
epochOfMax = zeros(numRuns, 1);
maxflightTime = zeros(numRuns, 1);
exploration.completion = 0;

for r = 1:numRuns
    % Create the agents and feasels
    [agents] = create_agents(batteryAgents, motorAgents, propAgents,rodAgents,Qinit);
    % The best performance obtained by the team
    bestG(1)= -10000;
    G=-10000;
    epochOfMax(r) = 0;
    e=1;
    converged=false;
    bestGc=nan(1,maxEpochs);
    avgGk=nan(1,maxEpochs);
    
    while converged==false
        e=e+1;
        
        bestG(e)=bestG(e-1);
        k=0;
        for k=1:numKs
            
            exploration.completion = k/numKs;

            % Have agents choose actions
            actions = choose_actions(agents, exploration);
            actions_hist(:, r, e) = actions;

            % Get rewards for agents and system performance
            [rewards, G] = compute_rewards(actions);
            
            G_hist(r,e,k)=G;
            G_khist(k)=G;
            avgGk(e)=mean(G_khist);
                        
            [agents, learned] = update_values(agents, rewards, alpha, actions, 'best');
            agents_hist{r, e} = agents;
            
            if learned
            learndisp=' learned';
            else
                learndisp='.';
            end 
            
            disp([num2str(r) ', ' num2str(e) ', ' num2str(k) ', G=' num2str(G, 3) ', maxG=' num2str(bestG(e), 3) ' , avgG=' num2str(avgGk(e), 3) learndisp])
            
            if G > bestG(e) %&& all(constraints <= 0.01)
                bestG(e) = G;
                % Update record of best actions generated by the system
                bestActions(r,:) = actions;
            end
            
        end

       if e>stopEpoch+1
            if bestG(e)==bestG(e-stopEpoch)
                converged=true;
            end
       end
       if e>maxEpochs
           converged=true;
       end
       
    end
    bestGc(1:length(bestG))=bestG;
    bestGhist(r,:)=bestGc;
    avgGhist(r,:)=avgGk;
    clear bestG
end

if ~exist('Saved Workspaces', 'dir')
    mkdir('Saved Workspaces');
end

uav_plots

if saveWorkspace
    if stateful, strState = 'state'; else strState = 'NOstate'; end
    save(['Saved Workspaces\\' ...
            strState ...
        '_' exploration.mode '_' ...
            char((useD == 1) * 'D' + (useD == 0) * 'G') ... 'D' or 'G', depending on useD
        '_' penalty.Mode '_' datestr(now,'mm-dd-yy_HH.MM.SS') '.mat'])
end
